const express = require('express');
const cors = require('cors');
const axios = require('axios');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 5000;

const { BOT_TOKEN, CHAT_ID } = require('./config.js');

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, '../frontend/build')));

async function sendTelegramMessage(formData) {
  try {
    const message = `
üéØ <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ</b>

üë§ <b>–ò–º—è:</b> ${formData.name}
üéØ <b>–¶–µ–ª—å:</b> ${getPurposeLabel(formData.purpose)}
üìû <b>–°–ø–æ—Å–æ–± —Å–≤—è–∑–∏:</b> ${getContactMethodLabel(formData.contactMethod)}
üì± <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b> ${formData.contactValue}
${formData.telegram ? `üì± <b>Telegram:</b> @${formData.telegram.replace('@', '')}` : ''}

üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:</b>
${formData.description}

‚è∞ <b>–í—Ä–µ–º—è –∑–∞—è–≤–∫–∏:</b> ${formData.timestamp || new Date().toLocaleString('ru-RU', {
      timeZone: 'Europe/Moscow',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    })}${formData.timeZone ? ` (${formData.timeZone})` : ''}
    `;

    const response = await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      chat_id: CHAT_ID,
      text: message,
      parse_mode: 'HTML',
      disable_web_page_preview: true
    });

    return { success: true, messageId: response.data.result.message_id };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error.response?.data || error.message);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≤ Telegram');
  }
}

function getPurposeLabel(value) {
  const purposes = {
    'website': '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∞–π—Ç–∞',
    'support': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
    'project': '–ü—Ä–æ–µ–∫—Ç–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
    'consultation': '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è',
    'other': '–î—Ä—É–≥–æ–µ'
  };
  return purposes[value] || value;
}

function getContactMethodLabel(value) {
  const methods = {
    'phone': '–¢–µ–ª–µ—Ñ–æ–Ω',
    'whatsapp': 'WhatsApp',
    'telegram': 'Telegram',
    'email': 'Email'
  };
  return methods[value] || value;
}

function validateFormData(data) {
  const errors = [];
  
  if (!data.name || data.name.trim().length < 2) {
    errors.push('–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞');
  }
  
  if (!data.purpose) {
    errors.push('–ù–µ —É–∫–∞–∑–∞–Ω–∞ —Ü–µ–ª—å –∑–∞—è–≤–∫–∏');
  }
  
  if (!data.contactMethod) {
    errors.push('–ù–µ —É–∫–∞–∑–∞–Ω —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏');
  }
  
  if (!data.contactValue || data.contactValue.trim().length < 3) {
    errors.push('–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞');
  }
  
  if (!data.description || data.description.trim().length < 10) {
    errors.push('–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤');
  }
  
  if (!data.agreeToPrivacy) {
    errors.push('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏–µ —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏');
  }
  
  return errors;
}

app.post('/api/send-form', async (req, res) => {
  try {
    const formData = req.body;
    
    const validationErrors = validateFormData(formData);
    if (validationErrors.length > 0) {
      return res.status(400).json({
        success: false,
        errors: validationErrors
      });
    }

    const telegramResult = await sendTelegramMessage(formData);
    
    if (telegramResult.success) {
      res.json({
        success: true,
        message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!',
        messageId: telegramResult.messageId
      });
    } else {
      throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram');
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º—ã:', error);
    res.status(500).json({
      success: false,
      message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

app.get('/api/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    uptime: process.uptime()
  });
});

app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, '../frontend/build', 'index.html'));
});

app.use((error, req, res, next) => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  res.status(500).json({
    success: false,
    message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
  });
});

app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üì± Telegram Bot Token: ${BOT_TOKEN ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`);
  console.log(`üí¨ Chat ID: ${CHAT_ID || '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`);
});

module.exports = app;
